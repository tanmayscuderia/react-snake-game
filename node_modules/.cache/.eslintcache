[{"/Users/tanmaytiwari/development/game-react-snake/src/reportWebVitals.js":"1","/Users/tanmaytiwari/development/game-react-snake/src/index.tsx":"2","/Users/tanmaytiwari/development/game-react-snake/src/App.tsx":"3","/Users/tanmaytiwari/development/game-react-snake/src/store/index.ts":"4","/Users/tanmaytiwari/development/game-react-snake/src/store/sagas/index.ts":"5","/Users/tanmaytiwari/development/game-react-snake/src/store/reducers/index.ts":"6","/Users/tanmaytiwari/development/game-react-snake/src/store/actions/index.ts":"7","/Users/tanmaytiwari/development/game-react-snake/src/components/Score.tsx":"8","/Users/tanmaytiwari/development/game-react-snake/src/components/Board.tsx":"9"},{"size":362,"mtime":1696746305429,"results":"10","hashOfConfig":"11"},{"size":219,"mtime":1696759005287,"results":"12","hashOfConfig":"11"},{"size":331,"mtime":1696784299059,"results":"13","hashOfConfig":"11"},{"size":327,"mtime":1696757878708,"results":"14","hashOfConfig":"11"},{"size":1307,"mtime":1696753466331,"results":"15","hashOfConfig":"11"},{"size":2112,"mtime":1696785974783,"results":"16","hashOfConfig":"11"},{"size":1073,"mtime":1696786202583,"results":"17","hashOfConfig":"11"},{"size":328,"mtime":1696787366615,"results":"18","hashOfConfig":"11"},{"size":6457,"mtime":1696788749149,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1azqzhq",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"/Users/tanmaytiwari/development/game-react-snake/src/reportWebVitals.js",[],[],["49"],"/Users/tanmaytiwari/development/game-react-snake/src/index.tsx",[],[],"/Users/tanmaytiwari/development/game-react-snake/src/App.tsx",[],[],"/Users/tanmaytiwari/development/game-react-snake/src/store/index.ts",[],[],"/Users/tanmaytiwari/development/game-react-snake/src/store/sagas/index.ts",[],[],"/Users/tanmaytiwari/development/game-react-snake/src/store/reducers/index.ts",[],[],"/Users/tanmaytiwari/development/game-react-snake/src/store/actions/index.ts",[],[],"/Users/tanmaytiwari/development/game-react-snake/src/components/Score.tsx",[],[],"/Users/tanmaytiwari/development/game-react-snake/src/components/Board.tsx",["50","51"],[],"import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { State } from '../store/reducers';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN, RESET_SCORE, moveSnake, resetGame, stopGame, updateScore, Coordinates, increaseSnake, INCREASE_SCORE } from \"../store/actions\";\nimport './Board.css';\n\nconst getRandomPosition = (position: number) => {\n    const randomPosition = Math.random() * position;\n    return randomPosition - (randomPosition % 20);\n}\n\nconst generateRandomPosition = (width: number, height: number) => {\n    return {\n        x: getRandomPosition(width),\n        y: getRandomPosition(height),\n    };\n};\n\nconst clearBoard = (context: CanvasRenderingContext2D | null) => {\n    if (context) {\n        context.clearRect(0, 0, 1000, 600);\n    }\n};\n\nconst designCharacters = (\n    context: CanvasRenderingContext2D | null,\n    objectBody: Coordinates[],\n    fillColor: string,\n    strokeStyle = \"#146356\"\n) => {\n    if (context) {\n        objectBody.forEach((object: Coordinates) => {\n            context.fillStyle = fillColor;\n            context.strokeStyle = strokeStyle;\n            context?.fillRect(object.x, object.y, 20, 20);\n            context?.strokeRect(object.x, object.y, 20, 20);\n        });\n    }\n};\n\nexport const hasSnakeCollided = (\n    snake: Coordinates[],\n    currentHeadPos: Coordinates\n) => {\n    let flag = false;\n    snake.forEach((position: Coordinates, index: number) => {\n        if (\n            position.x === currentHeadPos.x &&\n            position.y === currentHeadPos.y &&\n            index !== 0\n        ) {\n            flag = true;\n        }\n    });\n\n    return flag;\n};\n\nconst Board = ({ height, width }: CanvasScreen) => {\n    const dispatch = useDispatch();\n    const notAllowedDirection = useSelector((state: State) => state.notAllowedDirection);\n    const snake = useSelector((state: State) => state.snake);\n    const [position, setPosition] = useState<Coordinates>(generateRandomPosition(width - 20, height - 20));\n    const [isEaten, setIsEaten] = useState<boolean>(false);\n    const [endGame, setEndGame] = useState<boolean>(false);\n    const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n    useEffect(() => {\n        if (isEaten) {\n            const randomPosition = generateRandomPosition(width - 20, height - 20);\n            setPosition(randomPosition);\n            setIsEaten(false);\n            dispatch(increaseSnake());\n            dispatch(updateScore(INCREASE_SCORE));\n        }\n    }, [isEaten, position, height, width, dispatch]);\n\n\n    const snakeMovement = useCallback(\n        (x = 0, y = 0, ds: string) => {\n            if (x === 0 && y < 0 && ds !== \"UP\") {\n                dispatch(moveSnake(x, y, DIRECTION_UP));\n            }\n\n            if (x === 0 && y > 0 && ds !== \"DOWN\") {\n                dispatch(moveSnake(x, y, DIRECTION_DOWN));\n            }\n\n            if (x < 0 && y === 0 && ds !== \"LEFT\") {\n                dispatch(moveSnake(x, y, DIRECTION_LEFT));\n            }\n\n            if (x > 0 && y === 0 && ds !== \"RIGHT\") {\n                dispatch(moveSnake(x, y, DIRECTION_RIGHT));\n            }\n        },\n        [dispatch]\n    );\n\n    const keyMovement = useCallback(\n        (event: KeyboardEvent) => {\n            if (notAllowedDirection) {\n                console.log('s', event.key);\n                    \n                switch (event.key) {\n                    case \"ArrowUp\":\n                        snakeMovement(0, -20, notAllowedDirection);\n                        break;\n                    case \"ArrowDown\":\n                        snakeMovement(0, 20, notAllowedDirection);\n                        break;\n                    case \"ArrowLeft\":\n                        snakeMovement(-20, 0, notAllowedDirection);\n                        break;\n                    case \"ArrowRight\":\n                        event.preventDefault();\n                        snakeMovement(20, 0, notAllowedDirection);\n                        break;\n                }\n            } else {\n                if (\n                    notAllowedDirection !== \"LEFT\" &&\n                    notAllowedDirection !== \"UP\" &&\n                    notAllowedDirection !== \"DOWN\" &&\n                    event.key === \"s\"\n                )\n                    snakeMovement(20, 0, notAllowedDirection);\n            }\n        },\n        [notAllowedDirection, snakeMovement]\n    );\n\n\n    useEffect(() => {\n        window.addEventListener(\"keydown\", keyMovement);\n\n        return () => {\n            window.removeEventListener(\"keydown\", keyMovement);\n        };\n    }, [notAllowedDirection, keyMovement]);\n\n    const resetBoard = useCallback(() => {\n        window.removeEventListener(\"keydown\", keyMovement);\n        dispatch(resetGame());\n        dispatch(updateScore(RESET_SCORE));\n        clearBoard(context);\n        designCharacters(context, snake, \"#91C483\");\n        designCharacters(\n            context,\n            [generateRandomPosition(width - 20, height - 20)],\n            \"#676FA3\"\n        );\n        window.addEventListener(\"keydown\", keyMovement);\n    }, [context, dispatch, keyMovement, height, snake, width]);\n\n    useEffect(() => {\n        setContext(canvasRef.current && canvasRef.current.getContext(\"2d\"));\n        clearBoard(context);\n        designCharacters(context, snake, \"#91C483\");\n        designCharacters(context, [position], \"#676FA3\");\n\n        if (snake[0].x === position?.x && snake[0].y === position?.y) {\n            setIsEaten(true);\n        }\n\n        if (\n            hasSnakeCollided(snake, snake[0]) ||\n            snake[0].x >= width ||\n            snake[0].x <= 0 ||\n            snake[0].y <= 0 ||\n            snake[0].y >= height\n        ) {\n            setEndGame(true);\n            dispatch(stopGame());\n            window.removeEventListener(\"keydown\", keyMovement);\n        } else setEndGame(false);\n    }, [context, position, snake, height, width, dispatch, keyMovement]);\n\n\n    return (\n        <>\n            <canvas\n                className=\"canvas-container\"\n                ref={canvasRef}\n                width={width}\n                height={height}\n            />\n            {/* <Instruction resetBoard={resetBoard} /> */}\n        </>\n    );\n};\n\nexport default Board;\n\nexport interface CanvasScreen {\n    width: number;\n    height: number;\n}\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":65,"column":12,"nodeType":"56","messageId":"57","endLine":65,"endColumn":19},{"ruleId":"54","severity":1,"message":"58","line":143,"column":11,"nodeType":"56","messageId":"57","endLine":143,"endColumn":21},"no-new-object",["59"],"@typescript-eslint/no-unused-vars","'endGame' is assigned a value but never used.","Identifier","unusedVar","'resetBoard' is assigned a value but never used.","no-object-constructor"]
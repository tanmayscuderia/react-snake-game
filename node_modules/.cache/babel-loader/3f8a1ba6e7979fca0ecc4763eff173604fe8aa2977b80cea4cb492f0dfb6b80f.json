{"ast":null,"code":"var _jsxFileName = \"/Users/tanmaytiwari/development/game-react-snake/src/components/Board.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN, RESET_SCORE, makeMove, resetGame, stopGame, updateScore, increaseSnake, INCREASE_SCORE } from \"../store/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getRandomPosition = position => {\n  const randomPosition = Math.random() * position;\n  return randomPosition - randomPosition % 20;\n};\nconst generateRandomPosition = (width, height) => {\n  return {\n    x: getRandomPosition(width),\n    y: getRandomPosition(height)\n  };\n};\nconst clearBoard = context => {\n  if (context) {\n    context.clearRect(0, 0, 1000, 600);\n  }\n};\nconst drawObject = (context, objectBody, fillColor, strokeStyle = \"#146356\") => {\n  if (context) {\n    objectBody.forEach(object => {\n      context.fillStyle = fillColor;\n      context.strokeStyle = strokeStyle;\n      context === null || context === void 0 ? void 0 : context.fillRect(object.x, object.y, 20, 20);\n      context === null || context === void 0 ? void 0 : context.strokeRect(object.x, object.y, 20, 20);\n    });\n  }\n};\nexport const hasSnakeCollided = (snake, currentHeadPos) => {\n  let flag = false;\n  snake.forEach((pos, index) => {\n    if (pos.x === currentHeadPos.x && pos.y === currentHeadPos.y && index !== 0) {\n      flag = true;\n    }\n  });\n  return flag;\n};\nconst Board = ({\n  height,\n  width\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const notAllowedDirection = useSelector(state => state.notAllowedDirection);\n  const snake = useSelector(state => state.snake);\n  const [position, setPosition] = useState(generateRandomPosition(width - 20, height - 20));\n  const [isEaten, setIsEaten] = useState(false);\n  const [endGame, setEndGame] = useState(false);\n  const [context, setContext] = useState(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (isEaten) {\n      const randomPosition = generateRandomPosition(width - 20, height - 20);\n      setPosition(randomPosition);\n      setIsEaten(false);\n      dispatch(increaseSnake());\n      dispatch(updateScore(INCREASE_SCORE));\n    }\n  }, [isEaten, position, height, width, dispatch]);\n  const snakeMovement = useCallback((x = 0, y = 0, ds) => {\n    if (x === 0 && y < 0 && ds !== \"UP\") {\n      dispatch(makeMove(x, y, DIRECTION_UP));\n    }\n    if (x === 0 && y > 0 && ds !== \"DOWN\") {\n      dispatch(makeMove(x, y, DIRECTION_DOWN));\n    }\n    if (x < 0 && y === 0 && ds !== \"LEFT\") {\n      dispatch(makeMove(x, y, DIRECTION_LEFT));\n    }\n    if (x > 0 && y === 0 && ds !== \"RIGHT\") {\n      dispatch(makeMove(x, y, DIRECTION_RIGHT));\n    }\n  }, [dispatch]);\n  const keyMovement = useCallback(event => {\n    if (notAllowedDirection) {\n      switch (event.key) {\n        case \"w\":\n          snakeMovement(0, -20, notAllowedDirection);\n          break;\n        case \"s\":\n          snakeMovement(0, 20, notAllowedDirection);\n          break;\n        case \"a\":\n          snakeMovement(-20, 0, notAllowedDirection);\n          break;\n        case \"d\":\n          event.preventDefault();\n          snakeMovement(20, 0, notAllowedDirection);\n          break;\n      }\n    } else {\n      if (notAllowedDirection !== \"LEFT\" && notAllowedDirection !== \"UP\" && notAllowedDirection !== \"DOWN\" && event.key === \"d\") snakeMovement(20, 0, notAllowedDirection); //Move RIGHT at start\n    }\n  }, [notAllowedDirection, snakeMovement]);\n  useEffect(() => {\n    window.addEventListener(\"keypress\", keyMovement);\n    return () => {\n      window.removeEventListener(\"keypress\", keyMovement);\n    };\n  }, [notAllowedDirection, keyMovement]);\n  const resetBoard = useCallback(() => {\n    window.removeEventListener(\"keypress\", keyMovement);\n    dispatch(resetGame());\n    dispatch(updateScore(RESET_SCORE));\n    clearBoard(context);\n    drawObject(context, snake, \"#91C483\");\n    drawObject(context, [generateRandomPosition(width - 20, height - 20)], \"#676FA3\");\n    window.addEventListener(\"keypress\", keyMovement);\n  }, [context, dispatch, keyMovement, height, snake, width]);\n  useEffect(() => {\n    setContext(canvasRef.current && canvasRef.current.getContext(\"2d\"));\n    clearBoard(context);\n    drawObject(context, snake, \"#91C483\");\n    drawObject(context, [position], \"#676FA3\");\n    if (snake[0].x === (position === null || position === void 0 ? void 0 : position.x) && snake[0].y === (position === null || position === void 0 ? void 0 : position.y)) {\n      setIsEaten(true);\n    }\n    if (hasSnakeCollided(snake, snake[0]) || snake[0].x >= width || snake[0].x <= 0 || snake[0].y <= 0 || snake[0].y >= height) {\n      setEndGame(true);\n      dispatch(stopGame());\n      window.removeEventListener(\"keypress\", keyMovement);\n    } else setEndGame(false);\n  }, [context, position, snake, height, width, dispatch, keyMovement]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        border: `3px solid ${endGame ? \"red\" : \"black\"}`\n      },\n      width: width,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Board, \"yC/qMfrcQ7jFv0t7fR1yn4T9jLQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","useDispatch","useSelector","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","RESET_SCORE","makeMove","resetGame","stopGame","updateScore","increaseSnake","INCREASE_SCORE","jsxDEV","_jsxDEV","Fragment","_Fragment","getRandomPosition","position","randomPosition","Math","random","generateRandomPosition","width","height","x","y","clearBoard","context","clearRect","drawObject","objectBody","fillColor","strokeStyle","forEach","object","fillStyle","fillRect","strokeRect","hasSnakeCollided","snake","currentHeadPos","flag","pos","index","Board","_s","dispatch","notAllowedDirection","state","setPosition","isEaten","setIsEaten","endGame","setEndGame","setContext","canvasRef","snakeMovement","ds","keyMovement","event","key","preventDefault","window","addEventListener","removeEventListener","resetBoard","current","getContext","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tanmaytiwari/development/game-react-snake/src/components/Board.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { State } from '../store/reducers';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN, RESET_SCORE, makeMove, resetGame, stopGame, updateScore, Coordinates, increaseSnake, INCREASE_SCORE } from \"../store/actions\";\n\nconst getRandomPosition = (position: number) => {\n    const randomPosition = Math.random() * position;\n    return randomPosition - (randomPosition % 20);\n}\n\nconst generateRandomPosition = (width: number, height: number) => {\n    return {\n        x: getRandomPosition(width),\n        y: getRandomPosition(height),\n    };\n};\n\nconst clearBoard = (context: CanvasRenderingContext2D | null) => {\n    if (context) {\n        context.clearRect(0, 0, 1000, 600);\n    }\n};\n\nconst drawObject = (\n    context: CanvasRenderingContext2D | null,\n    objectBody: Coordinates[],\n    fillColor: string,\n    strokeStyle = \"#146356\"\n) => {\n    if (context) {\n        objectBody.forEach((object: Coordinates) => {\n            context.fillStyle = fillColor;\n            context.strokeStyle = strokeStyle;\n            context?.fillRect(object.x, object.y, 20, 20);\n            context?.strokeRect(object.x, object.y, 20, 20);\n        });\n    }\n};\n\nexport const hasSnakeCollided = (\n    snake: Coordinates[],\n    currentHeadPos: Coordinates\n) => {\n    let flag = false;\n    snake.forEach((pos: Coordinates, index: number) => {\n        if (\n            pos.x === currentHeadPos.x &&\n            pos.y === currentHeadPos.y &&\n            index !== 0\n        ) {\n            flag = true;\n        }\n    });\n\n    return flag;\n};\n\nconst Board = ({ height, width }: CanvasScreen) => {\n    const dispatch = useDispatch();\n    const notAllowedDirection = useSelector((state: State) => state.notAllowedDirection);\n    const snake = useSelector((state: State) => state.snake);\n    const [position, setPosition] = useState<Coordinates>(generateRandomPosition(width - 20, height - 20));\n    const [isEaten, setIsEaten] = useState<boolean>(false);\n    const [endGame, setEndGame] = useState<boolean>(false);\n    const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n    useEffect(() => {\n        if (isEaten) {\n            const randomPosition = generateRandomPosition(width - 20, height - 20);\n            setPosition(randomPosition);\n            setIsEaten(false);\n            dispatch(increaseSnake());\n            dispatch(updateScore(INCREASE_SCORE));\n        }\n    }, [isEaten, position, height, width, dispatch]);\n\n\n    const snakeMovement = useCallback(\n        (x = 0, y = 0, ds: string) => {\n            if (x === 0 && y < 0 && ds !== \"UP\") {\n                dispatch(makeMove(x, y, DIRECTION_UP));\n            }\n\n            if (x === 0 && y > 0 && ds !== \"DOWN\") {\n                dispatch(makeMove(x, y, DIRECTION_DOWN));\n            }\n\n            if (x < 0 && y === 0 && ds !== \"LEFT\") {\n                dispatch(makeMove(x, y, DIRECTION_LEFT));\n            }\n\n            if (x > 0 && y === 0 && ds !== \"RIGHT\") {\n                dispatch(makeMove(x, y, DIRECTION_RIGHT));\n            }\n        },\n        [dispatch]\n    );\n\n    const keyMovement = useCallback(\n        (event: KeyboardEvent) => {\n            if (notAllowedDirection) {\n                switch (event.key) {\n                    case \"w\":\n                        snakeMovement(0, -20, notAllowedDirection);\n                        break;\n                    case \"s\":\n                        snakeMovement(0, 20, notAllowedDirection);\n                        break;\n                    case \"a\":\n                        snakeMovement(-20, 0, notAllowedDirection);\n                        break;\n                    case \"d\":\n                        event.preventDefault();\n                        snakeMovement(20, 0, notAllowedDirection);\n                        break;\n                }\n            } else {\n                if (\n                    notAllowedDirection !== \"LEFT\" &&\n                    notAllowedDirection !== \"UP\" &&\n                    notAllowedDirection !== \"DOWN\" &&\n                    event.key === \"d\"\n                )\n                    snakeMovement(20, 0, notAllowedDirection); //Move RIGHT at start\n            }\n        },\n        [notAllowedDirection, snakeMovement]\n    );\n\n\n    useEffect(() => {\n        window.addEventListener(\"keypress\", keyMovement);\n\n        return () => {\n            window.removeEventListener(\"keypress\", keyMovement);\n        };\n    }, [notAllowedDirection, keyMovement]);\n\n    const resetBoard = useCallback(() => {\n        window.removeEventListener(\"keypress\", keyMovement);\n        dispatch(resetGame());\n        dispatch(updateScore(RESET_SCORE));\n        clearBoard(context);\n        drawObject(context, snake, \"#91C483\");\n        drawObject(\n            context,\n            [generateRandomPosition(width - 20, height - 20)],\n            \"#676FA3\"\n        );\n        window.addEventListener(\"keypress\", keyMovement);\n    }, [context, dispatch, keyMovement, height, snake, width]);\n\n    useEffect(() => {\n        setContext(canvasRef.current && canvasRef.current.getContext(\"2d\"));\n        clearBoard(context);\n        drawObject(context, snake, \"#91C483\");\n        drawObject(context, [position], \"#676FA3\");\n\n        if (snake[0].x === position?.x && snake[0].y === position?.y) {\n            setIsEaten(true);\n        }\n\n        if (\n            hasSnakeCollided(snake, snake[0]) ||\n            snake[0].x >= width ||\n            snake[0].x <= 0 ||\n            snake[0].y <= 0 ||\n            snake[0].y >= height\n        ) {\n            setEndGame(true);\n            dispatch(stopGame());\n            window.removeEventListener(\"keypress\", keyMovement);\n        } else setEndGame(false);\n    }, [context, position, snake, height, width, dispatch, keyMovement]);\n\n\n    return (\n        <>\n            <canvas\n                ref={canvasRef}\n                style={{\n                    border: `3px solid ${endGame ? \"red\" : \"black\"}`,\n                }}\n                width={width}\n                height={height}\n            />\n            {/* <Instruction resetBoard={resetBoard} /> */}\n        </>\n    );\n};\n\nexport interface CanvasScreen {\n    width: number;\n    height: number;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}